recurs
secuenci
introduccion
programacion
semestre,
pain
black
philip
glass
version
cc
nc
pierr
metivi
flickr
secuenci
general
secuenci
estructur
dat
sirv
represent
divers
tip
informacion
divers
objet
acced
posicion
medi
indice:
numer
enter
tip
secuenci
python
●
inmutables:
element
modific
string,
tupl
bytes
●
mutables:
element
modific
listas,
arregl
general
secuenci
acces
posicion
sintaxis:
secuencia[]
→
valor
tom
,
defin
secuenci
n
numer
element
secuencia,
:
indices:
n
n
secuenci
n
elementos:
posicion
er
elemento:
posicion
nesim
elemento:
n
secuencia[]
element
posicion
ejemplo:
tip
string
str
→
inmut
nota:
acced
posiciones,
modific
ejemplo:
tip
list
list
→
mutabl
nota:
acced
posicion
modific
error
correspond
acces
inval
indic
exist
cort
slicing
operacion
obten
cort
element
list
sintaxis:
secuencia[:j]
nota:
indic
j,
opcional
>>>
list
[,
,
,
,
]
>>>
lista[:]
→
[,
]
>>>
lista[:]
→
[,
,
,
]
cdr
schem
>>>
lista[:]
→
[,
,
]
concatenacion
problem
composicion
llam
union
sintaxis:
b
b
secuenci
'
'
oper
→
result
operacion
secuenci
nuev
element
b
concaten
→
conmutativa:
orden
import
result
recurs
regl
fundamental
resolv
problem
recursivos:
●
defin
cas
bas
solucion
trivial
●
solucion
necesit
proces
adicional
●
defin
llam
recurs
solucion
problem
pequen
●
aport
respuest
parcial
sal
reduc
taman
complej
problem
modific
argument
intension
tiend
cas
bas
recursiv
pointing
cc
sa
dnisbet
flickr
recurs
regl
fundamental
resolv
problem
recurs
form
eficiente:
●
restriccion
general
cas
especial
/deb
trabaj
funcion
principal
●
punt
entrad
problem
●
“pesado”
resuelt
funcion
auxili
recurs
invoc
principal
●
nucleo,
“cuore”
corazon
solucion
finit
stairc
cc
sa
gadl
flickr
consej
identifiqu
cas
sencill
resolv
cas
bas
●
condicion
deberi
llev
cas
bas
●
deb
retorn
cas
result
return
result
final
parcial
consej
busqu
form
problem
pequen
hag
plan
prueb
:
cas
sencill
cas
complej
cas
grand
cas
error
evalu
utiliz
papel
lapiz
recursiv
road
sign
cc
sa
gadl
flickr
recurs
permit
model
solucion
tip
problem
…
ayud
desarroll
capac
abstraccion
pas
solucion
problem
→
abstraccion
realidad,
:
●
“visualizar”
form
descompon
problem
●
lleg
nivel
detall
suficient
reflej
algoritm
ilusionaria,tod
derech
reservados,
minut
ejercicio:
list
problem
determin
cuant
element
list
list
deb
resolv
utiliz
recurs
utilic
slicing
conteste:
explic
primer
logic
palabr
lueg
escrib
python
●
problem
men
complej
●
finaliz
conte
●
llev
cuent
utiliz
recurs
pruebe:
●
usand
cas
prueb
respuest
ejercicio:
list
list
def
list
list
:
'''
funcion:
obten
list
entradas:
list
salidas:
cantid
element
list
restricciones:
'''
list
[]:
condicion
terminacion
return
retorn
else:
result
parcial
llam
recurs
return
list
lista[:]
ejercicio:
list
par
list
escrib
funcion
recib
list
retorn
list
conteng
element
par
deb
valid
element
list
entradas
numer
enter
deb
resolv
utiliz
recurs
utilic
slicing
concatenacion
list
conteste:
explic
primer
logic
palabr
lueg
escrib
python
●
problem
men
complej
●
finaliz
conte
●
llev
cuent
utiliz
recurs
pruebe:
●
usand
cas
prueb
●
hac
pil
llam
recurs
ejempl
funcion:
obten
element
par
list
entradas:
list
salidas:
list
element
par
restricciones:
def
list
par
list
:
list
[]:
condicion
terminacion
return
[]
retorn
elif
lista[]
:
revision
element
par
return
[lista[]]
list
par
lista[:]
else:
return
list
par
lista[:]
ejercici
multiplic
element
list
>>>
def
multipl
list
cont
numer
element
par
list
>>>
def
cuent
par
list
dad
list
entrada,
retorn
tru
algun
numer
impar
fals
par
>>>
def
impar
list
elimin
primer
aparicion
element
list
“lista”
entrad
borr
primer
aparicion
“elemento”
retorn
nuev
list
>>>
def
elimin
lista,
element
ejercici
intercal
intercal
element
list
retorn
nuev
list
def
intercal
primer
lista,
segund
list
>>>
intercal
[,,],
[,,]
[,,,,,]
>>>
intercal
[,,],
['','b',]
[,
'',
,
'b',
,
]
present
curs
ic
:
"introduccion
programacion"
ing
computacion
alajuel
distribu
licenci
creativ
commons
atribucion
compart
igual
cost
ric
http://creativecommons
org/licenses/
sa/
/cr/http://creativecommons
org/licenses/
sa/
/cr/
licenci
presentacion
cubr
imagen
utiliz
