
recursividad
introduccion
programacion
semestre,
agenda
●
implementacion
de
funciones
recursivas
python
●
recursividad
otra
vez
conceptualmente
●
detalles
implementacion
python
●
verificacion
de
restricciones
●
funciones
eficientes
●
ejercicios
recursividad
reglas
fundamentales
resolver
problemas
recursivos:
●
definir
caso
base
solucion
trivial
●
solucion
que
necesita
procesamiento
adicional
●
definir
llamadas
recursivas
solucion
de
problema
mas
pequeno
●
aportar
respuesta
parcial
salida
y
reducir
tamano
o
complejidad
del
problema
modificando
argumentos
intension
de
que
tiendan
al
caso
base
recursive
pointing
cc
sa
dnisbet
flickr
afinando
detalles
●
volvamos
funcion
num
digitos
numero
y
analicemos
de
forma
critica
e
ingenieril:
●
que
problemas
terminos
de
eficiencia
●
que
problemas
hay
validaciones
restricciones
afinar
estos
detalles
ei
ingeniero
bad
boss
cc
nc
sa
erickherbert
flickr
recursividad
eficiente
reglas
fundamentales
resolver
problemas
recursivos
de
forma
eficiente:
●
validacion
de
restricciones
generales
o
casos
especiales
/deben
trabajados
funcion
principal
recursiva
●
este
punto
de
entrada
nuestro
problema,
ahi
aseguraremos
que
datos
son
correctos
●
“pesado”
/debe
resuelto
funcion
auxiliar
recursiva
que
sera
invocada
principal
●
este
nucleo,
“cuore”
o
corazon
de
solucion
def
num
digitos
numero
:
se
evalua
vez
isinstance
numero,int
:
return
'error'
elif
numero
:
caso
especial
return
else:
return
num
digitos
aux
abs
numero
def
num
digitos
aux
numero
:
numero
:
caso
base
return
else:
funcion
recursiva
argumentos
'mas
pequenos'
return
num
digitos
aux
numero
//
se
ejecuta
num
digitos
>>>
num
digitos
num
digitos
aux
abs
num
digitos
aux
//
num
digitos
aux
//
num
digitos
aux
//
num
digitos
aux
//
numero
>>>
>>>
num
digitos
>>>
caso
especial
finite
staircase
cc
sa
gadl
flickr
consejos
identifique
o
casos
mas
sencillos
resolver
casos
base
●
condicion
que
deberia
llevarnos
al
caso
base
●
que
debe
retornar
ese
caso
resultados
return
seran
resultados
finales
o
parciales
busque
forma
de
problema
mas
pequeno
●
hasta
ahora
problemas
pedian
“reducir”
numero
quitandole
digitos,
siempre
sera
asi
●
identifique
casos
de
prueba
que
incluyan
casos
sencillos
y
otros
complejos
y
evalue
utilizando
papel
y
lapiz
que
que
haciendo
python
→
comente
funcion
num
digitos
siguiendo
estos
consejos:
casos
base,
resultados
parciales,
finales
y
finaliza
programa
sucesion
de
fibonacci
leonardo
de
pisa
●
inicia
f
y
f
,
y
partir
de
ahi
elemento
suma
de
anteriores
●
de
forma
formal,
n
naturales
fibonacci
n
fibonacci
,
n
→
fibonacci
,
n
→
fibonacci
n
,
n
>
→
fibonacci
n
fibonacci
n
encontrar:
●
entradas,
salidas,
restricciones
●
caso
base,
soluciones
parciales,
finales,
casos
de
prueba
hagan
corrida
del
programa
papel,
prestando
especial
atencion
pila
de
llamadas
recursive
road
sign
cc
sa
gadl
flickr
ejercicios
funcion
que
cuente
veces
que
aparece
digito
numero:
>>>
cuenta
digito
,
→
>>>
cuenta
digito
,
→
funcion
factorial
se
define
:
haga
funcion
recursiva
resolver
factorial
de
cualquier
numero
entero
positivo
>>>
factorial
→
||
>>>factorial
→
||
>>>factorial
→
ejercicios
construya
numero
nuevo
digitos
pares
de
numero
recibido
parametro
de
funcion:
>>>
pares
→
>>>
pares
→
piense
algoritmo
y
trate
de
descomponer
problema
otros
pequenos
●
cuales
serian
recuerde
validaciones:
este
caso
numero
que
recibe
funcion
debe
entero
●
caso
de
que
se
cumpla
se
debe
retornar
mensaje
'error'
ejercicios
numero
palindromo
leerse
igual
de
izquierda
derecha
o
de
derecha
izquierda,
escriba
funcion
determinar
propiedad
sintaxis:
palindromo
numero
→
salida
:
numero
numero
entero
positivo
y
salida
debe
booleano:
true
o
false
>>>
palindromo
false
>>>
palindromo
'error'
>>>
palindromo
true
>>>
palindromo
true
>>>
palindromo
true
>>>
palindromo
true
presentaciones
curso
ic
:
"introduccion
programacion"
ing
computacion
alajuela
se
distribuyen
licencia
creative
commons
atribucion
compartir
igual
costa
rica
http://creativecommons
org/licenses/
sa/
/cr/http://creativecommons
org/licenses/
sa/
/cr/
licencia
de
presentacion
cubre
imagenes
utilizadas
