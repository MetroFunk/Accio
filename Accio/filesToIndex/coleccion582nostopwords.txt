
introduccion
python
x
introduccion
programacion
semestre,
lenguaje
de
programacion
python
python:
lenguaje
de
alto
nivel
→
utilizado
aprender
programar
breve
historia:
●
holanda,
guido
rossum
crea
lenguaje
de
programacion
●
se
crea
python
software
foundation
psf
promover
proteccion
de
libertad
y
avance
lenguaje
e
programacion
cc
sa
doc
searls
wikipedia
caracteristicas
existen
muchas
implementaciones
cpython,
jython,
pypy
multiplataforma:
nix,
macos,
symbian
nokia
,
pocket
pc,
ipod,
palm,
windows,
android
multiparadigma:
orientado
objetos,
imperativo,
funcional
●
python
objeto
orientacion
objetos
este
concepto
se
trabajara
mas
adelante
curso,
importante
consciente
que
todas
representaciones
de
elementos
usadas
lenguaje
son
objetos
caracteristicas
muchas
bibliotecas
disponibles
usadas
●
programacion
interfaces
graficas,
aplicaciones
cliente
servidor,
visores
de
html,
bases
de
datos
●
mayor
cantidad
de
recursos
reutilizables
version
que
lenguaje
de
scripting
de
manera
natural
transferencia
de
datos
aplicaciones
y
sistema
operativo
ambientes
de
programacion
y
ejecucion
●
idle
integrated
development
environment
,
…
●
geany
editor
generico
●
interfaces
graficas:
pygame,
tkinter,
qt,
●
interprete
de
comandos
consola
ejecucion
de
expresiones
se
ejecutar
shell,
correctas
devuelven
o
resultado
de
contrario
mensaje
de
error
●
terminal:
python
●
idle:
idle
error
de
sintaxis
●
expresion
mal
formada
●
identacion
inesperada
error
semantico
definida
division
cero
identificadores
identificadores:
usados
variable
o
nombres
de
funcion
●
tantos
caracteres
desee
sean
letras,
numeros
o
“guion
”
[
]
●
“nombre”/
iniciar
numero
●
“case
sensitive”
sensible
mayusculas
y
minusculas
●
aguacate
●
aguacate
●
aguacate
→
buena
practica:
identificadores
significativos
●
facilita
legibilidad
y
mantenimiento
del
software
escrito
identificadores
palabras
reservadas
keywords
●
utilizadas
identificadores
ordinarios
variables
representaciones
simbolicas
de
datos
del
programa
funcionan
variables
terminos
de
implementacion
y
semanticamente
sintaxis
de
asignacion
de
valores:
variable
expresion
variable
asociado
“tipo
de
dato”
python
son
dinamicas
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
●
enteros
–
enteros
int
–
boolean
bool
true
y
false
●
reales
float
●
complejos
complex
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
conjuntos
de
datos
indexados,
comienzan
cero
y
hasta
n
,
n
de
secuencia
●
mutables:
●
listas
list
,
arreglos
array
,
arreglos
de
bytes
bytearray
●
inmutables:
se
modifican
●
string
str
,
tupla
tuple
,
bytes
bytes
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
representan
conjuntos
finitos
de
objetos,
unicos
y
orden
●
mutables
set
●
inmutables:
frozen
sets
frozenset
tipos
de
datos
●
nativos:
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
●
manera
de
manejar
estructuras
de
datos
indice
key
value
expresiones
y
operadores
aritmeticos
contener
variables,
literales,
constantes
y
operadores
se
evaluar
y
retornar
algun
resultado
aritmeticas
son
subtipo
cuales
se
opera
numeros
operadores
aritmeticos
operacion
descripcion
ejemplo
 
 b
suma
 – b
resta
 
 b
producto
 / b 
division
/
/
 // b
division
entera
//
 
 b
residuo
de
division
entera
­
negativo
positivo
 
 b
potencia
division
entera
negativos
python:
//
b
c
o
b
negativo
casos
que
c
sea
numero
entero
python
redondeara
resultado
al
numero
entero
menor
mas
proximo
c
●
matematica:
/
,,
python:
//
resultado
de
division
entera
segun
python
pues
numero
entero
menor
mas
cercano
al
resultado
ver
punto
rojo
●
matematica:
/
,
,
python:
//
ver
punto
naranja
●
matematica:
/
,
,
python:
//
ver
punto
verde
mayores…
…
menores
precedencia
operaciones
de
mayor
precedencia
se
evaluan
primero
hay
algun
operador
de
mayor
precedencia
se
evaluan
de
izquierda
derecha
parentesis
funciona
establecer
precedencia
forzada
ejercicio:
resuelva
●
>>>
–
●
>>>
●
>>>
●
>>>
expresiones
parentesis
potencia
x
x
negativo,
positivo
/
//
multiplicacion,
division,
residuo
suma,
resta
figura
de
derecha,
precedencia
de
abajo
conversion
explicita
de
tipos
●
normalmente
tipo
de
expresiones
aritmeticas
dado
tipos
de
operadores
●
obtener
resultado
tipo
particular
se
utilizar
constructores
p
o
o
:
int
,
float
,
complex
/
da
resultado
numero
real:
quiero
entero
necesario
conversion
explicita
de
tipo
conversion
explicita
de
tipos
otras
consideraciones:
●
truncamiento:
●
numeros
flotantes:
●
number
'nan'
●
infinity
'inf'
expresiones
logicas
●
operadores
formas
expresiones
de
logica
booleana
operacion
descripcion
b
falso,
retorna
b,
sino
retorna
b
falso,
retorna
,
sino
retorna
b
falso,
retorna
true,
sino
retorna
false
●
valores
falsos:
●
none
nonetype
●
false
bool
●
cero
de
tipos
numericos
int,
float,
…
●
secuencias
vacias:
'
',
,
[]
str,
tuple,
list
tablas
de
logica
booleana
b
b
b
true
true
true
true
false
true
false
false
true
false
false
true
false
true
true
false
false
false
false
true
expresiones
operadores
relacionales
●
permiten
realizar
comparaciones
expresiones
operaciones
misma
prioridad
operacion
descripcion
ejemplo
<
y
<
menor
que
y
menor
o
igual
que
>>>  < 
>>> true
>
y
>
mayor
que
y
mayor
o
igual
que
>>>  <
 
>>> true
igual
que
>>> 
 
 
>>> true
>>>  
 ''
>>> 
diferente
de
>>> 'jaime' 
 'jaime'
>>> true
–
identidad
de
objeto
y
negacion
son
mismo
objeto
>>> x 
 'j'  | >>> y 
 'j'
>>>
x
y
>>> false
–
pertenencia
y
negacion
>>>
x
jaime'
>>>
''
x
>>>true
asignacion
operador
operaciones
aritmeticas
simples
binarias:
operados
combinadas
asignacion
de
variables
variable operadorbinario
 
variable 
 
variable ­
●
estas
asignaciones
son
equivalentes
funcionalmente
:
x 
 x 
 
x 
 
diferencia
sera
mas
recomendable
elementos
predefinidos:
funciones
codigo
que
realiza
tarea
de
acuerdo
argumentos
brindados
da
salida
partir
de
entradas
disponibles:
http://docs
python
org//library/functions
html
file:///usr/share/doc/python
doc/html/library/functions
html
python
doc
elementos
predefinidos:
funciones
sintaxis
>>> nombre
funcion 
arg, arg, …, argn 
respuesta
:
●
nombre
funcion:
corresponde
identificador
valido
●
respuesta
salida
que
se
espera
funcion
funcion
metodo
retorna
ejemplo
abs
arg
absoluto
de
arg
>>>abs
divmod
,
b
par
//
b,
b
>>>
divmod
,
,
pow
,
b
elevado
potencia
b
>>>
pow
,
round
,
[,
n]
redondeado
n
digitos
decimales,
n
se
omite
se
asume
cero
aplica
float
o
int
>>>
round
,
,
elementos
predefinidos:
metodos
estos
se
definen
tareas
especificas,
relacionadas
concepto
de
clase
orientacion
objetos
metodos
son
“funciones
especificas
de
clases”
●
deben
importarse
clases
metodos
●
clase
math:
http://docs
python
org//library/math
html
file:///usr/share/doc/python
doc/html/library/math
html
python
doc
elementos
predefinidos:
metodos
sintaxis
>>> clase
metodo 
arg, arg, …, argn 
respuesta
:
●
clase
y
metodo:
corresponden
identificadores
validos
●
respuesta
salida
que
se
espera
metodo
metodo
retorna
ejemplo
import
math
math
floor
arg
menor
entero
>
arg
>>>math
floor
math
ceil
arg
mayor
entero,
<
arg
>>>math
ceil
math
sqrt
arg
raiz
cuadrada
de
arg
>>>math
sqrt
math
log
,
[,
base]
logaritmo
de
base
dada
hay
base
se
asume
logaritmo
natural
>>>
math
log
,
importacion
de
librerias
libreria:
conjunto
de
codigos
funciones
y
datos,
que
utilizados
programas
independientes
se
deben
importar
utilizadas
ejemplos
:
obtener
resultado
de
√
raiz
cuadrada
de
:
>>> modulo
mate 
 
import
'math'
>>> modulo
mate
sqrt
>>> import math
>>> math
sqrt
>>> import math  m
>>> m
sqrt
>>>  math import sqrt  raiz
>>> raiz
>>>  math import sqrt
>>> sqrt
>>>  math import 
>>> sqrt
>>> 
ayuda
>>>
help
welcome
python
online
help
utility
first
time
using
python,
definitely
check
tutorial
internet
http://docs
python
org/
/tutorial/
enter
name
module,
keyword,
topic
get
help
writing
python
programs
using
python
modules
quit
help
utility
return
interpreter,
just
type
"quit"
get
list
available
modules,
keywords,
topics,
type
"modules",
"keywords",
"topics"
module
also
comes
one
line
summary
;
list
modules
whose
summaries
contain
given
word
"spam",
type
"modules
spam"
zen
de
python
>>>
import
→
zen
de
python:
otros
huevos
de
pascua
apt
get
moo
oo
/
\/
/
|
||
/\
/\
"
mooed
today
"
bello
mejor
que
feo
explicito
mejor
que
implicito
simple
mejor
que
complejo
complejo
mejor
que
complicado
plano
mejor
que
anidado
ralo
mejor
que
denso
legibilidad
cuenta
casos
especiales
son
tan
especiales
quebrantar
reglas
aunque
practico
gana
pureza
errores
nunca
deberian
dejarse
pasar
silenciosamente
menos
que
hayan
sido
silenciados
explicitamente
frente
ambiguedad,
rechaza
tentacion
de
adivinar
deberia
haber
y
preferiblemente
manera
obvia
de
hacerlo
aunque
esa
manera
obvia
al
principio
menos
que
usted
sea
holandes
ahora
mejor
que
nunca
aunque
nunca
veces
mejor
que
ya
implementacion
dificil
de
explicar,
mala
idea
implementacion
facil
de
explicar,
que
sea
buena
idea
espacios
de
nombres
namespaces
son
gran
idea
hagamos
mas
de
esas
cosas
referencias
y
lecturas
complementarias
●
material
suministrado
profesor
jeff
schmidt,
instituto
tecnologico
de
costa
rica
semestre
●
identificadores
y
palabras
reservadas:
http://docs
python
org/release/
/reference/lexical
analysis
html
identifiers
●
objetos,
valores
y
tipos:
http://docs
python
org/release/
/reference/datamodel
html
objects
values
types
●
precedencia
de
operadores:
http://docs
python
org/release/
/reference/expressions
html
summary
●
general:
http://docs
python
org//
http://creativecommons
org/licenses/
sa/
/cr/
licencia
de
presentacion
cubre
imagenes
utilizadas
introduccion
python
x
introduccion
programacion
semestre,
lenguaje
de
programacion
python
python:
lenguaje
de
alto
nivel
→
utilizado
aprender
programar
breve
historia:
●
holanda,
guido
rossum
crea
lenguaje
de
programacion
●
se
crea
python
software
foundation
psf
promover
proteccion
de
libertad
y
avance
lenguaje
e
programacion
cc
sa
doc
searls
wikipedia
caracteristicas
existen
muchas
implementaciones
cpython,
jython,
pypy
multiplataforma:
nix,
macos,
symbian
nokia
,
pocket
pc,
ipod,
palm,
windows,
android
multiparadigma:
orientado
objetos,
imperativo,
funcional
●
python
objeto
orientacion
objetos
este
concepto
se
trabajara
mas
adelante
curso,
importante
consciente
que
todas
representaciones
de
elementos
usadas
lenguaje
son
objetos
python:
escrito
c
jython:
escrito
java
pypy:
escrito
python
caracteristicas
muchas
bibliotecas
disponibles
usadas
●
programacion
interfaces
graficas,
aplicaciones
cliente
servidor,
visores
de
html,
bases
de
datos
●
mayor
cantidad
de
recursos
reutilizables
version
que
lenguaje
de
scripting
de
manera
natural
transferencia
de
datos
aplicaciones
y
sistema
operativo
ambientes
de
programacion
y
ejecucion
●
idle
integrated
development
environment
,
…
●
geany
editor
generico
●
interfaces
graficas:
pygame,
tkinter,
qt,
●
interprete
de
comandos
consola
sitio
web
del
ninja
ide:
http://ninja
ide
org/
ejecucion
de
expresiones
se
ejecutar
shell,
correctas
devuelven
o
resultado
de
contrario
mensaje
de
error
●
terminal:
python
●
idle:
idle
error
de
sintaxis
●
expresion
mal
formada
●
identacion
inesperada
error
semantico
definida
division
cero
python
entendido
programa
de
software
que
ejecuta
expresiones
validas
ese
mismo
lenguaje
de
programacion
shell:
python
idle
tambien
se
ejecutar
directamente
invocando
programa
python
archivo
de
python
parametro
python
archivo
py
identificadores
identificadores:
usados
variable
o
nombres
de
funcion
●
tantos
caracteres
desee
sean
letras,
numeros
o
“guion
”
[
]
●
“nombre”/
iniciar
numero
●
“case
sensitive”
sensible
mayusculas
y
minusculas
●
aguacate
●
aguacate
●
aguacate
→
buena
practica:
identificadores
significativos
●
facilita
legibilidad
y
mantenimiento
del
software
escrito
mucho
enfasis
ejemplo
ejercicio
del
calculo
del
area
del
circulo,
estos
identificadores:
radio
variable
pi
contante
area
circulo
funcion
ejemplos:
>>>
aguacate
"viva
liga"
>>>
aguacate
'viva
liga'
>>>
aguacate
"viva
carmen"
>>>
aguacate
'viva
carmen'
>>>
aguacate
aguacate
false
>>>
aguacate
aguacate
true
identificadores
significativos:
ejercicio
del
circulo:
→
vez
de
“radio”
deciamos
“”,
funciona
luego
se
entiende
recordar
matematica
del
colegio
y
variables
extra:
funciones:
calcular
area
de
circulo
pi
r
def
area
circulo
radio
:
area
radio
return
area
identificadores
palabras
reservadas
keywords
●
utilizadas
identificadores
ordinarios
iremos
conociendo
poco
poco
variables
representaciones
simbolicas
de
datos
del
programa
funcionan
variables
terminos
de
implementacion
y
semanticamente
sintaxis
de
asignacion
de
valores:
variable
expresion
variable
asociado
“tipo
de
dato”
python
son
dinamicas
reforzar
diferencia
datos
e
instrucciones/codigo
implementacion:
variable
espacio
de
memoria,
que
se
utiliza
almacenar
semanticamente:
se
cambiando
y
se
borra
anterior
>>>
nombre
“jaime
gutierrez”
>>>
type
nombre
<type
'str'>
>>>
numeros
[,
,
,
,
]
>>>
numeros
[,
,
,
,
]
cualquiera
de
estos
ejemplos,
identificador
queda
definido
del
ambiente
de
ejecucion
y
utilizado
expresion
o
funcion
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
●
enteros
–
enteros
int
–
boolean
bool
true
y
false
●
reales
float
●
complejos
complex
numeros
enteros
funcionan
representar
numeros
naturales
y
enteros
flotantes
reales
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
conjuntos
de
datos
indexados,
comienzan
cero
y
hasta
n
,
n
de
secuencia
●
mutables:
●
listas
list
,
arreglos
array
,
arreglos
de
bytes
bytearray
●
inmutables:
se
modifican
●
string
str
,
tupla
tuple
,
bytes
bytes
tipos
de
datos
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
representan
conjuntos
finitos
de
objetos,
unicos
y
orden
●
mutables
set
●
inmutables:
frozen
sets
frozenset
tipos
de
datos
●
nativos:
●
numericos
●
secuencias
●
conjuntos
●
diccionarios
●
manera
de
manejar
estructuras
de
datos
indice
key
value
expresiones
y
operadores
aritmeticos
contener
variables,
literales,
constantes
y
operadores
se
evaluar
y
retornar
algun
resultado
aritmeticas
son
subtipo
cuales
se
opera
numeros
operadores
aritmeticos
operacion
descripcion
ejemplo
 
 b
suma
 – b
resta
 
 b
producto
 / b 
division
/
/
 // b
division
entera
//
 
 b
residuo
de
division
entera
­
negativo
positivo
 
 b
potencia
division
entera
negativos
python:
//
b
c
o
b
negativo
casos
que
c
sea
numero
entero
python
redondeara
resultado
al
numero
entero
menor
mas
proximo
c
●
matematica:
/
,,
python:
//
resultado
de
division
entera
segun
python
pues
numero
entero
menor
mas
cercano
al
resultado
ver
punto
rojo
●
matematica:
/
,
,
python:
//
ver
punto
naranja
●
matematica:
/
,
,
python:
//
ver
punto
verde
mayores…
…
menores
punto
rojo
corresponde
y
se
ver
que
enteros
mas
cercanos
son
o
,
menor
punto
naranja
corresponde
y
se
ver
que
enteros
mas
cercanos
son
y
,
menor
punto
verde
corresponde
y
se
ver
que
enteros
mas
cercanos
son
o
,
menor
precedencia
operaciones
de
mayor
precedencia
se
evaluan
primero
hay
algun
operador
de
mayor
precedencia
se
evaluan
de
izquierda
derecha
parentesis
funciona
establecer
precedencia
forzada
ejercicio:
resuelva
●
>>>
–
●
>>>
●
>>>
●
>>>
expresiones
parentesis
potencia
x
x
negativo,
positivo
/
//
multiplicacion,
division,
residuo
suma,
resta
figura
de
derecha,
precedencia
de
abajo
>>>
–
→
misma
precedencia,
se
evaluan
de
izquierda
derecha
>>>
→
precedencia
operador
de
multiplicacion
,
suma
y
resta
●
>>>
→
parentesis
obliga
evaluar
distinto
●
>>>
>>>
●
●
→
conversion
explicita
de
tipos
●
normalmente
tipo
de
expresiones
aritmeticas
dado
tipos
de
operadores
●
obtener
resultado
tipo
particular
se
utilizar
constructores
p
o
o
:
int
,
float
,
complex
/
da
resultado
numero
real:
quiero
entero
necesario
conversion
explicita
de
tipo
conversion
explicita
de
tipos
otras
consideraciones:
●
truncamiento:
●
numeros
flotantes:
●
number
'nan'
●
infinity
'inf'
operadores:
num
y
num
son
de
tipo
float
ojo
decimales
quiero
resultado
“truncado”
pasar
int
conversion
explicita
de
tipos
casting
,
tambien
se
le
llama
promocion
de
tipos
expresiones
logicas
●
operadores
formas
expresiones
de
logica
booleana
operacion
descripcion
b
falso,
retorna
b,
sino
retorna
b
falso,
retorna
,
sino
retorna
b
falso,
retorna
true,
sino
retorna
false
●
valores
falsos:
●
none
nonetype
●
false
bool
●
cero
de
tipos
numericos
int,
float,
…
●
secuencias
vacias:
'
',
,
[]
str,
tuple,
list
tablas
de
logica
booleana
b
b
b
true
true
true
true
false
true
false
false
true
false
false
true
false
true
true
false
false
false
false
true
estas
operaciones
retornan
de
operandos
expresiones
operadores
relacionales
●
permiten
realizar
comparaciones
expresiones
operaciones
misma
prioridad
operacion
descripcion
ejemplo
<
y
<
menor
que
y
menor
o
igual
que
>>>  < 
>>> true
>
y
>
mayor
que
y
mayor
o
igual
que
>>>  <
 
>>> true
igual
que
>>> 
 
 
>>> true
>>>  
 ''
>>> 
diferente
de
>>> 'jaime' 
 'jaime'
>>> true
–
identidad
de
objeto
y
negacion
son
mismo
objeto
>>> x 
 'j'  | >>> y 
 'j'
>>>
x
y
>>> false
–
pertenencia
y
negacion
>>>
x
jaime'
>>>
''
x
>>>true
asignacion
operador
operaciones
aritmeticas
simples
binarias:
operados
combinadas
asignacion
de
variables
variable operadorbinario
 
variable 
 
variable ­
●
estas
asignaciones
son
equivalentes
funcionalmente
:
x 
 x 
 
x 
 
diferencia
sera
mas
recomendable
diferencia
sintactica,
pues
semanticamente
mismo
se
recomienda
mejor
utilizar
forma
explicita
mas
legible
elementos
predefinidos:
funciones
codigo
que
realiza
tarea
de
acuerdo
argumentos
brindados
da
salida
partir
de
entradas
disponibles:
http://docs
python
org//library/functions
html
file:///usr/share/doc/python
doc/html/library/functions
html
python
doc
elementos
predefinidos
principales
son:
funciones
y
metodos
sugerencia
instalar
paquete:
python
doc
documentacion
de
python
computadora
siguiente
diapo:
abs,
divmod,
pow,
round
help
mostrar
detalles
de
sintaxis:
argumentos
opcionales
denotados
[]
argumentos
obligatorios
revisar
aca
detenerme
sitaxis
:
print
>>>
print
"hola"
hola
>>>
print
"hola","mundo"
hola
mundo
>>>
print
"hola","mundo",
sep
"
"
hola
mundo
>>>
print
"hola","mundo",
sep
"
",
end
"\t"
hola
mundo
>>>
input
>>>
entrada
input
"
equipo
mejor
"
equipo
mejor
liga
liga
>>>
entrada
'liga
liga'
>>>
entrada
input
"
equipo
mejor
\n"
equipo
mejor
liga
liga
>>>
entrada
'liga
liga'
elementos
predefinidos:
funciones
sintaxis
>>> nombre
funcion 
arg, arg, …, argn 
respuesta
:
●
nombre
funcion:
corresponde
identificador
valido
●
respuesta
salida
que
se
espera
funcion
funcion
metodo
retorna
ejemplo
abs
arg
absoluto
de
arg
>>>abs
divmod
,
b
par
//
b,
b
>>>
divmod
,
,
pow
,
b
elevado
potencia
b
>>>
pow
,
round
,
[,
n]
redondeado
n
digitos
decimales,
n
se
omite
se
asume
cero
aplica
float
o
int
>>>
round
,
,
funciones:
concepto
de
funcion
lenguajes
de
programacion
se
asocia
codigo
que
realiza
tarea
especifica
de
acuerdo
argumentos
que
se
le
brinden
buscar
funciones
ejemplo
anterior
elementos
predefinidos:
metodos
estos
se
definen
tareas
especificas,
relacionadas
concepto
de
clase
orientacion
objetos
metodos
son
“funciones
especificas
de
clases”
●
deben
importarse
clases
metodos
●
clase
math:
http://docs
python
org//library/math
html
file:///usr/share/doc/python
doc/html/library/math
html
python
doc
metodos:
sirven
definir
tareas
especificas,
relacionados
concepto
de
clase
y
que
se
desarrollan
detalle
capitulo
,
"programacion
orientada
objetos"
constructores
que
vimos
convertir
numero
entero,
son
ejemplos
de
funciones
importar:
programas
ejecutandose,
cargan
memoria
“
codigo”
corespondiente
interpretar
comandos
que
ponemos
veces
se
diseno
modular
y
se
carga
ahorrar
memoria,
importamos
modulo
memoria
codigo
que
“”
interpretar
nuevos
comandos
este
enfoque
denota
eficiencia
o
recursos
r/
,
recursos
se
ocupa
menos
memoria
y
hay
que
buscar
cosas
menos
espacio
de
memoria,
o
sea
mś
rapido
metafora:
ponga
cosas
pupitre,
tenga
apuntes
mochilla
ocupa
algo
saquelo
de
mochila
y
pongalo
pupitre
elementos
predefinidos:
metodos
sintaxis
>>> clase
metodo 
arg, arg, …, argn 
respuesta
:
●
clase
y
metodo:
corresponden
identificadores
validos
●
respuesta
salida
que
se
espera
metodo
metodo
retorna
ejemplo
import
math
math
floor
arg
menor
entero
>
arg
>>>math
floor
math
ceil
arg
mayor
entero,
<
arg
>>>math
ceil
math
sqrt
arg
raiz
cuadrada
de
arg
>>>math
sqrt
math
log
,
[,
base]
logaritmo
de
base
dada
hay
base
se
asume
logaritmo
natural
>>>
math
log
,
>>>
math
sqrt
traceback
recent
call
last
:
file
"<stdin>",
line
,
<module>
valueerror:
math
domain
error
solucion:
dado
funcion
definida
enteros
>>>
math
log
,
importacion
de
librerias
libreria:
conjunto
de
codigos
funciones
y
datos,
que
utilizados
programas
independientes
se
deben
importar
utilizadas
ejemplos
:
obtener
resultado
de
√
raiz
cuadrada
de
:
>>> modulo
mate 
 
import
'math'
>>> modulo
mate
sqrt
>>> import math
>>> math
sqrt
>>> import math  m
>>> m
sqrt
>>>  math import sqrt  raiz
>>> raiz
>>>  math import sqrt
>>> sqrt
>>>  math import 
>>> sqrt
>>> 
forma:
>>>
modulo
mate
import
'math'
>>>
modulo
mate
sqrt
util
pruebas
unitarias,
ejemplo
nombre
del
archivo
numero
de
carne
ayuda
>>>
help
welcome
python
online
help
utility
first
time
using
python,
definitely
check
tutorial
internet
http://docs
python
org/
/tutorial/
enter
name
module,
keyword,
topic
get
help
writing
python
programs
using
python
modules
quit
help
utility
return
interpreter,
just
type
"quit"
get
list
available
modules,
keywords,
topics,
type
"modules",
"keywords",
"topics"
module
also
comes
one
line
summary
;
list
modules
whose
summaries
contain
given
word
"spam",
type
"modules
spam"
>>>
help
abs
>>>
zen
de
python
>>>
import
→
zen
de
python:
otros
huevos
de
pascua
apt
get
moo
oo
/
\/
/
|
||
/\
/\
"
mooed
today
"
bello
mejor
que
feo
explicito
mejor
que
implicito
simple
mejor
que
complejo
complejo
mejor
que
complicado
plano
mejor
que
anidado
ralo
mejor
que
denso
legibilidad
cuenta
casos
especiales
son
tan
especiales
quebrantar
reglas
aunque
practico
gana
pureza
errores
nunca
deberian
dejarse
pasar
silenciosamente
menos
que
hayan
sido
silenciados
explicitamente
frente
ambiguedad,
rechaza
tentacion
de
adivinar
deberia
haber
y
preferiblemente
manera
obvia
de
hacerlo
aunque
esa
manera
obvia
al
principio
menos
que
usted
sea
holandes
ahora
mejor
que
nunca
aunque
nunca
veces
mejor
que
ya
implementacion
dificil
de
explicar,
mala
idea
implementacion
facil
de
explicar,
que
sea
buena
idea
espacios
de
nombres
namespaces
son
gran
idea
hagamos
mas
de
esas
cosas
james
jupiter:
apt
get
moo
oo
/
\/
/
|
||
/\
/\
"
mooed
today
"
referencias
y
lecturas
complementarias
●
material
suministrado
profesor
jeff
schmidt,
instituto
tecnologico
de
costa
rica
semestre
●
identificadores
y
palabras
reservadas:
http://docs
python
org/release/
/reference/lexical
analysis
html
identifiers
●
objetos,
valores
y
tipos:
http://docs
python
org/release/
/reference/datamodel
html
objects
values
types
●
precedencia
de
operadores:
http://docs
python
org/release/
/reference/expressions
html
summary
●
general:
http://docs
python
org//
http://creativecommons
org/licenses/
sa/
/cr/
licencia
de
presentacion
cubre
imagenes
utilizadas
