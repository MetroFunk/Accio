
recursividad
secuencias
introduccion
programacion
semestre,
pain
black
philip
glass
version
cc
nc
pierre
metivier
flickr
secuencias
generalidades
de
secuencias
son
estructuras
de
datos
que
sirven
representar
diversos
tipos
de
informacion
diversos
objetos
se
acceder
de
posiciones
medio
de
indice:
numero
entero
tipos
de
secuencias
python
●
inmutables:
elementos
modificados
string,
tupla
y
bytes
●
mutables:
elementos
modificados
listas,
arreglos
generalidades
de
secuencias
acceso
posicion
sintaxis:
secuencia[]
→
valores
que
tomar
,
definidos
de
secuencia
n
numero
de
elementos
de
secuencia,
:
indices:
y
n
o
y
n
secuencia
de
n
elementos:
posicion
del
er
elemento:
posicion
del
nesimo
elemento:
n
secuencia[]
elemento
posicion
ejemplo:
tipo
string
str
→
inmutable
nota:
se
acceder
posiciones,
se
modificar
ejemplo:
tipo
list
list
→
mutable
nota:
se
acceder
posiciones
y
se
modificar
error
corresponde
acceso
invalido
indice
existe
cortes
o
slicing
operacion
obtener
cortes
de
elementos
de
lista
sintaxis:
secuencia[:j]
nota:
indices
y
j,
son
opcionales
>>>
lista
[,
,
,
,
]
>>>
lista[:]
→
[,
]
>>>
lista[:]
→
[,
,
,
]
cdr
scheme
>>>
lista[:]
→
[,
,
]
concatenacion
problema
de
composicion
tambien
se
le
llama
union
sintaxis:
b
y
b
son
secuencias
y
'
'
operador
→
resultado
de
operacion
secuencia
nueva
elementos
de
y
b
concatenados
→
conmutativa:
orden
importante
resultado
recursividad
reglas
fundamentales
resolver
problemas
recursivos:
●
definir
caso
base
solucion
trivial
●
solucion
que
necesita
procesamiento
adicional
●
definir
llamadas
recursivas
solucion
de
problema
mas
pequeno
●
aportar
respuesta
parcial
salida
y
reducir
tamano
o
complejidad
del
problema
modificando
argumentos
intension
de
que
tiendan
al
caso
base
recursive
pointing
cc
sa
dnisbet
flickr
recursividad
reglas
fundamentales
resolver
problemas
recursivos
de
forma
eficiente:
●
restricciones
generales
o
casos
especiales
/deben
trabajados
funcion
principal
●
este
punto
de
entrada
nuestro
problema
●
“pesado”
resuelto
funcion
auxiliar
recursiva
que
sera
invocada
principal
●
este
nucleo,
“cuore”
o
corazon
de
solucion
finite
staircase
cc
sa
gadl
flickr
consejos
identifique
o
casos
mas
sencillos
resolver
casos
base
●
condicion
que
deberia
llevarnos
al
caso
base
●
que
debe
retornar
ese
caso
resultados
return
seran
resultados
finales
o
parciales
consejos
busque
forma
de
problema
mas
pequeno
haga
plan
de
pruebas
:
casos
sencillos
casos
complejos
casos
grandes
casos
de
error
evalue
utilizando
papel
y
lapiz
recursive
road
sign
cc
sa
gadl
flickr
recursividad
permite
modelar
solucion
de
tipos
de
problemas
…
ayuda
desarrollar
capacidad
de
abstraccion
paso
de
solucion
problema
→
abstraccion
de
realidad,
:
●
“visualizar”
formas
descomponer
problema
●
llegar
nivel
de
detalle
suficiente
reflejado
algoritmo
ilusionaria,todos
derechos
reservados,
minutos
ejercicio:
lista
problema
determinar
cuantos
elementos
lista
de
lista
se
debe
resolver
utilizando
recursividad
utilice
slicing
conteste:
explicando
primero
logica
palabras
y
luego
escribiendolo
python
●
se
problema
menos
complejo
●
finaliza
conteo
●
se
lleva
cuenta
utilizando
recursividad
pruebe:
●
usando
casos
de
prueba
respuesta
ejercicio:
lista
lista
def
lista
lista
:
'''
funcion:
obtener
de
lista
entradas:
lista
salidas:
cantidad
de
elementos
de
lista
restricciones:
hay
'''
lista
[]:
condicion
de
terminacion
return
de
retorno
else:
resultado
parcial
llamada
recursiva
return
lista
lista[:]
ejercicio:
lista
pares
lista
escriba
funcion
que
reciba
lista
y
retorne
lista
que
contenga
elementos
pares
ella
debe
validar
que
todos
elementos
de
lista
de
entradasean
numeros
enteros
se
debe
resolver
utilizando
recursividad
utilice
slicing
y
concatenacion
de
listas
conteste:
explicando
primero
logica
palabras
y
luego
escribiendolo
python
●
se
problema
menos
complejo
●
finaliza
conteo
●
se
lleva
cuenta
utilizando
recursividad
pruebe:
●
usando
casos
de
prueba
●
haciendo
pila
de
llamados
recursivos
ejemplo
funcion:
obtener
elementos
pares
de
lista
entradas:
lista
salidas:
lista
de
elementos
pares
restricciones:
hay
def
lista
pares
lista
:
lista
[]:
condicion
de
terminacion
return
[]
de
retorno
elif
lista[]
:
revision
elemento
par
return
[lista[]]
lista
pares
lista[:]
else:
return
lista
pares
lista[:]
ejercicios
multiplicar
elementos
de
lista
>>>
def
multiplica
lista
contar
numero
de
elementos
pares
de
lista
>>>
def
cuenta
pares
lista
dada
lista
de
entrada,
retornar
true
hay
algun
numero
impar
o
false
todos
son
pares
>>>
def
hay
impar
lista
elimine
primera
aparicion
de
elemento
lista
de
“lista”
de
entrada
se
borrara
primera
aparicion
de
“elemento”
retorna
nueva
lista
>>>
def
eliminar
lista,
elemento
ejercicios
intercalar
intercala
elementos
de
listas
retorna
nueva
lista
def
intercala
primera
lista,
segunda
lista
>>>
intercala
[,,],
[,,]
[,,,,,]
>>>
intercala
[,,],
['','b',]
[,
'',
,
'b',
,
]
presentaciones
curso
ic
:
"introduccion
programacion"
ing
computacion
alajuela
se
distribuyen
licencia
creative
commons
atribucion
compartir
igual
costa
rica
http://creativecommons
org/licenses/
sa/
/cr/http://creativecommons
org/licenses/
sa/
/cr/
licencia
de
presentacion
cubre
imagenes
utilizadas
